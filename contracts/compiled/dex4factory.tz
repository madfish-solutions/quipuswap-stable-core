{ parameter
    (or (or (or %factory_action (big_map %copy_dex_function nat bytes) (unit %freeze))
            (or %use_admin
               (or (or (pair %add_rem_managers (bool %add) (address %candidate))
                       (pair %claim_developer
                          (or %token (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                          (nat %amount)))
                   (or (pair %ramp_A (nat %pool_id) (pair (nat %future_A) (timestamp %future_time)))
                       (address %set_admin)))
               (or (or (address %set_default_referral)
                       (pair %set_fees
                          (nat %pool_id)
                          (pair %fee (nat %lp_f) (pair (nat %stakers_f) (nat %ref_f)))))
                   (nat %stop_ramp_A))))
        (or %user_action
           (or %use_dex
              (or (or (pair %claim_referral
                         (or %token (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                         (nat %amount))
                      (pair %divest
                         (nat %pool_id)
                         (pair (map %min_amounts_out nat nat)
                               (pair (nat %shares) (pair (timestamp %deadline) (option %receiver address))))))
                  (or (pair %divest_imbalanced
                         (nat %pool_id)
                         (pair (map %amounts_out nat nat)
                               (pair (nat %max_shares)
                                     (pair (timestamp %deadline)
                                           (pair (option %receiver address) (option %referral address))))))
                      (pair %divest_one_coin
                         (nat %pool_id)
                         (pair (nat %shares)
                               (pair (nat %token_index)
                                     (pair (nat %min_amount_out)
                                           (pair (timestamp %deadline)
                                                 (pair (option %receiver address) (option %referral address)))))))))
              (or (or (pair %invest
                         (nat %pool_id)
                         (pair (nat %shares)
                               (pair (map %in_amounts nat nat)
                                     (pair (timestamp %deadline)
                                           (pair (option %receiver address) (option %referral address))))))
                      (or %stake
                         (pair %add (nat %pool_id) (nat %amount))
                         (pair %remove (nat %pool_id) (nat %amount))))
                  (pair %swap
                     (nat %pool_id)
                     (pair (nat %idx_from)
                           (pair (nat %idx_to)
                                 (pair (nat %amount)
                                       (pair (nat %min_amount_out)
                                             (pair (timestamp %deadline)
                                                   (pair (option %receiver address) (option %referral address))))))))))
           (or %use_token
              (or (or (pair %balance_of
                         (list %requests (pair (address %owner) (nat %token_id)))
                         (contract %callback
                            (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                      (pair %total_supply (nat %token_id) (contract %receiver nat)))
                  (or (list %transfer
                         (pair (address %from_)
                               (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))
                      (pair %update_metadata (nat %token_id) (map %token_info string bytes))))
              (list %update_operators
                 (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id)))
                     (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))))))) ;
  storage
    (pair (pair %storage
             (address %admin)
             (pair (address %default_referral)
                   (pair (set %managers address)
                         (pair (nat %pools_count)
                               (pair (big_map %tokens
                                        nat
                                        (map nat (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))))
                                     (pair (big_map %pool_to_id bytes nat)
                                           (pair (big_map %pools
                                                    nat
                                                    (pair (nat %initial_A_f)
                                                          (pair (timestamp %initial_A_time)
                                                                (pair (nat %future_A_f)
                                                                      (pair (timestamp %future_A_time)
                                                                            (pair (map %tokens_info
                                                                                     nat
                                                                                     (pair (nat %rate_f) (pair (nat %precision_multiplier_f) (nat %reserves))))
                                                                                  (pair (pair %fee (nat %lp_f) (pair (nat %stakers_f) (nat %ref_f)))
                                                                                        (pair (pair %staker_accumulator (map %accumulator_f nat nat) (nat %total_staked))
                                                                                              (nat %total_supply)))))))))
                                                 (pair (big_map %ledger (pair address nat) nat)
                                                       (pair (big_map %allowances (pair address nat) (set address))
                                                             (pair (big_map %dev_rewards
                                                                      (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                                                                      nat)
                                                                   (pair (big_map %referral_rewards
                                                                            (pair address
                                                                                  (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id))))
                                                                            nat)
                                                                         (pair (big_map %stakers_balance
                                                                                  (pair address nat)
                                                                                  (pair (nat %balance) (map %earnings nat (pair (nat %reward_f) (nat %former_f)))))
                                                                               (pair (pair %quipu_token (address %token_address) (nat %token_id))
                                                                                     (pair (address %factory_address) (bool %started)))))))))))))))
          (pair (big_map %metadata string bytes)
                (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
                      (pair (big_map %admin_lambdas nat bytes)
                            (pair (big_map %dex_lambdas nat bytes) (big_map %token_lambdas nat bytes)))))) ;
  code { PUSH string "function-not-set" ;
         PUSH string "cant-unpack-use-lambda" ;
         PUSH string "not-contract-admin" ;
         PUSH string "not-started" ;
         DIG 4 ;
         UNPAIR ;
         DUP ;
         IF_LEFT
           { IF_LEFT
               { DIG 2 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 27 ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                 IF_LEFT
                   { UPDATE 9 }
                   { DROP ;
                     DUP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     DIG 2 ;
                     CAR ;
                     GET 28 ;
                     NOT ;
                     UPDATE 28 ;
                     UPDATE 1 } }
               { DROP ; SWAP } }
           { DROP ; SWAP } ;
         SWAP ;
         IF_LEFT
           { IF_LEFT
               { DIG 2 ; DIG 3 ; DIG 4 ; DIG 5 ; DROP 5 ; NIL operation ; PAIR }
               { DUG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 GET 28 ;
                 IF { DROP } { FAILWITH } ;
                 DUP ;
                 IF_LEFT
                   { IF_LEFT
                       { IF_LEFT
                           { DROP ;
                             DUG 2 ;
                             DUP ;
                             DUG 3 ;
                             CAR ;
                             CAR ;
                             SENDER ;
                             COMPARE ;
                             EQ ;
                             IF { DROP ; UNIT } { FAILWITH } }
                           { DIG 3 ; DROP 2 ; UNIT } }
                       { IF_LEFT
                           { DROP ;
                             DUG 2 ;
                             DUP ;
                             DUG 3 ;
                             CAR ;
                             CAR ;
                             SENDER ;
                             COMPARE ;
                             EQ ;
                             IF { DROP ; UNIT } { FAILWITH } }
                           { DROP ;
                             DUG 2 ;
                             DUP ;
                             DUG 3 ;
                             CAR ;
                             CAR ;
                             SENDER ;
                             COMPARE ;
                             EQ ;
                             IF { DROP ; UNIT } { FAILWITH } } } }
                   { IF_LEFT
                       { IF_LEFT
                           { DROP ;
                             DUG 2 ;
                             DUP ;
                             DUG 3 ;
                             CAR ;
                             CAR ;
                             SENDER ;
                             COMPARE ;
                             EQ ;
                             IF { DROP ; UNIT } { FAILWITH } }
                           { DROP ;
                             DUG 2 ;
                             DUP ;
                             DUG 3 ;
                             CAR ;
                             CAR ;
                             SENDER ;
                             COMPARE ;
                             EQ ;
                             IF { DROP ; UNIT } { FAILWITH } } }
                       { DROP ;
                         DUG 2 ;
                         DUP ;
                         DUG 3 ;
                         CAR ;
                         CAR ;
                         SENDER ;
                         COMPARE ;
                         EQ ;
                         IF { DROP ; UNIT } { FAILWITH } } } ;
                 DROP ;
                 DUP ;
                 IF_LEFT
                   { IF_LEFT
                       { IF_LEFT { DROP ; PUSH nat 0 } { DROP ; PUSH nat 2 } }
                       { IF_LEFT { DROP ; PUSH nat 3 } { DROP ; PUSH nat 1 } } }
                   { IF_LEFT
                       { IF_LEFT { DROP ; PUSH nat 6 } { DROP ; PUSH nat 5 } }
                       { DROP ; PUSH nat 4 } } ;
                 DIG 4 ;
                 DUP 4 ;
                 GET 7 ;
                 DUP 3 ;
                 GET ;
                 IF_NONE { FAILWITH } { SWAP ; DROP } ;
                 DIG 4 ;
                 SWAP ;
                 UNPACK
                   (lambda
                      (pair (or (or (or (pair %add_rem_managers (bool %add) (address %candidate))
                                        (pair %claim_developer
                                           (or %token (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                                           (nat %amount)))
                                    (or (pair %ramp_A (nat %pool_id) (pair (nat %future_A) (timestamp %future_time)))
                                        (address %set_admin)))
                                (or (or (address %set_default_referral)
                                        (pair %set_fees
                                           (nat %pool_id)
                                           (pair %fee (nat %lp_f) (pair (nat %stakers_f) (nat %ref_f)))))
                                    (nat %stop_ramp_A)))
                            (pair (address %admin)
                                  (pair (address %default_referral)
                                        (pair (set %managers address)
                                              (pair (nat %pools_count)
                                                    (pair (big_map %tokens
                                                             nat
                                                             (map nat (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))))
                                                          (pair (big_map %pool_to_id bytes nat)
                                                                (pair (big_map %pools
                                                                         nat
                                                                         (pair (nat %initial_A_f)
                                                                               (pair (timestamp %initial_A_time)
                                                                                     (pair (nat %future_A_f)
                                                                                           (pair (timestamp %future_A_time)
                                                                                                 (pair (map %tokens_info
                                                                                                          nat
                                                                                                          (pair (nat %rate_f) (pair (nat %precision_multiplier_f) (nat %reserves))))
                                                                                                       (pair (pair %fee (nat %lp_f) (pair (nat %stakers_f) (nat %ref_f)))
                                                                                                             (pair (pair %staker_accumulator (map %accumulator_f nat nat) (nat %total_staked))
                                                                                                                   (nat %total_supply)))))))))
                                                                      (pair (big_map %ledger (pair address nat) nat)
                                                                            (pair (big_map %allowances (pair address nat) (set address))
                                                                                  (pair (big_map %dev_rewards
                                                                                           (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                                                                                           nat)
                                                                                        (pair (big_map %referral_rewards
                                                                                                 (pair address
                                                                                                       (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id))))
                                                                                                 nat)
                                                                                              (pair (big_map %stakers_balance
                                                                                                       (pair address nat)
                                                                                                       (pair (nat %balance) (map %earnings nat (pair (nat %reward_f) (nat %former_f)))))
                                                                                                    (pair (pair %quipu_token (address %token_address) (nat %token_id))
                                                                                                          (pair (address %factory_address) (bool %started))))))))))))))))
                      (pair (list operation)
                            (pair (address %admin)
                                  (pair (address %default_referral)
                                        (pair (set %managers address)
                                              (pair (nat %pools_count)
                                                    (pair (big_map %tokens
                                                             nat
                                                             (map nat (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))))
                                                          (pair (big_map %pool_to_id bytes nat)
                                                                (pair (big_map %pools
                                                                         nat
                                                                         (pair (nat %initial_A_f)
                                                                               (pair (timestamp %initial_A_time)
                                                                                     (pair (nat %future_A_f)
                                                                                           (pair (timestamp %future_A_time)
                                                                                                 (pair (map %tokens_info
                                                                                                          nat
                                                                                                          (pair (nat %rate_f) (pair (nat %precision_multiplier_f) (nat %reserves))))
                                                                                                       (pair (pair %fee (nat %lp_f) (pair (nat %stakers_f) (nat %ref_f)))
                                                                                                             (pair (pair %staker_accumulator (map %accumulator_f nat nat) (nat %total_staked))
                                                                                                                   (nat %total_supply)))))))))
                                                                      (pair (big_map %ledger (pair address nat) nat)
                                                                            (pair (big_map %allowances (pair address nat) (set address))
                                                                                  (pair (big_map %dev_rewards
                                                                                           (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                                                                                           nat)
                                                                                        (pair (big_map %referral_rewards
                                                                                                 (pair address
                                                                                                       (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id))))
                                                                                                 nat)
                                                                                              (pair (big_map %stakers_balance
                                                                                                       (pair address nat)
                                                                                                       (pair (nat %balance) (map %earnings nat (pair (nat %reward_f) (nat %former_f)))))
                                                                                                    (pair (pair %quipu_token (address %token_address) (nat %token_id))
                                                                                                          (pair (address %factory_address) (bool %started))))))))))))))))) ;
                 IF_NONE { FAILWITH } { SWAP ; DROP } ;
                 DUP 4 ;
                 CAR ;
                 DIG 3 ;
                 PAIR ;
                 EXEC ;
                 UNPAIR ;
                 PUSH nat 7 ;
                 DIG 3 ;
                 COMPARE ;
                 EQ ;
                 IF { DIG 2 ;
                      DUP ;
                      GET 5 ;
                      EMPTY_MAP string bytes ;
                      PUSH string "ipfs://QmUXFJxwGEjknP5DKNwMwsWXvrY8G2jUMbxjdBE3ekP8DP" ;
                      PACK ;
                      SOME ;
                      PUSH string "thumbnailUri" ;
                      UPDATE ;
                      PUSH string "sdQPLP" ;
                      PACK ;
                      SOME ;
                      PUSH string "symbol" ;
                      UPDATE ;
                      PUSH bool True ;
                      PACK ;
                      SOME ;
                      PUSH string "shouldPreferSymbol" ;
                      UPDATE ;
                      PUSH string "Stable DEX QuipuSwap LP token" ;
                      PACK ;
                      SOME ;
                      PUSH string "name" ;
                      UPDATE ;
                      PUSH string "Liquidity Pool token of QuipuSwap Stable DEX" ;
                      PACK ;
                      SOME ;
                      PUSH string "description" ;
                      UPDATE ;
                      PUSH nat 1000000000000000000 ;
                      PACK ;
                      SOME ;
                      PUSH string "decimals" ;
                      UPDATE ;
                      PUSH nat 1 ;
                      DUP 6 ;
                      GET 7 ;
                      SUB ;
                      ABS ;
                      PAIR ;
                      PUSH nat 1 ;
                      DUP 6 ;
                      GET 7 ;
                      SUB ;
                      ABS ;
                      SWAP ;
                      SOME ;
                      SWAP ;
                      UPDATE ;
                      UPDATE 5 }
                    { DIG 2 } ;
                 DIG 2 ;
                 UPDATE 1 ;
                 SWAP ;
                 PAIR } }
           { DIG 3 ;
             DROP ;
             IF_LEFT
               { DUG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 GET 28 ;
                 IF { DROP } { FAILWITH } ;
                 DIG 3 ;
                 DUP 3 ;
                 GET 9 ;
                 DUP 3 ;
                 IF_LEFT
                   { IF_LEFT
                       { IF_LEFT { DROP ; PUSH nat 5 } { DROP ; PUSH nat 2 } }
                       { IF_LEFT { DROP ; PUSH nat 3 } { DROP ; PUSH nat 4 } } }
                   { IF_LEFT
                       { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 6 } }
                       { DROP ; PUSH nat 0 } } ;
                 GET ;
                 IF_NONE { FAILWITH } { SWAP ; DROP } ;
                 DIG 3 ;
                 SWAP ;
                 UNPACK
                   (lambda
                      (pair (or (or (or (pair %claim_referral
                                           (or %token (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                                           (nat %amount))
                                        (pair %divest
                                           (nat %pool_id)
                                           (pair (map %min_amounts_out nat nat)
                                                 (pair (nat %shares) (pair (timestamp %deadline) (option %receiver address))))))
                                    (or (pair %divest_imbalanced
                                           (nat %pool_id)
                                           (pair (map %amounts_out nat nat)
                                                 (pair (nat %max_shares)
                                                       (pair (timestamp %deadline)
                                                             (pair (option %receiver address) (option %referral address))))))
                                        (pair %divest_one_coin
                                           (nat %pool_id)
                                           (pair (nat %shares)
                                                 (pair (nat %token_index)
                                                       (pair (nat %min_amount_out)
                                                             (pair (timestamp %deadline)
                                                                   (pair (option %receiver address) (option %referral address)))))))))
                                (or (or (pair %invest
                                           (nat %pool_id)
                                           (pair (nat %shares)
                                                 (pair (map %in_amounts nat nat)
                                                       (pair (timestamp %deadline)
                                                             (pair (option %receiver address) (option %referral address))))))
                                        (or %stake
                                           (pair %add (nat %pool_id) (nat %amount))
                                           (pair %remove (nat %pool_id) (nat %amount))))
                                    (pair %swap
                                       (nat %pool_id)
                                       (pair (nat %idx_from)
                                             (pair (nat %idx_to)
                                                   (pair (nat %amount)
                                                         (pair (nat %min_amount_out)
                                                               (pair (timestamp %deadline)
                                                                     (pair (option %receiver address) (option %referral address))))))))))
                            (pair (address %admin)
                                  (pair (address %default_referral)
                                        (pair (set %managers address)
                                              (pair (nat %pools_count)
                                                    (pair (big_map %tokens
                                                             nat
                                                             (map nat (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))))
                                                          (pair (big_map %pool_to_id bytes nat)
                                                                (pair (big_map %pools
                                                                         nat
                                                                         (pair (nat %initial_A_f)
                                                                               (pair (timestamp %initial_A_time)
                                                                                     (pair (nat %future_A_f)
                                                                                           (pair (timestamp %future_A_time)
                                                                                                 (pair (map %tokens_info
                                                                                                          nat
                                                                                                          (pair (nat %rate_f) (pair (nat %precision_multiplier_f) (nat %reserves))))
                                                                                                       (pair (pair %fee (nat %lp_f) (pair (nat %stakers_f) (nat %ref_f)))
                                                                                                             (pair (pair %staker_accumulator (map %accumulator_f nat nat) (nat %total_staked))
                                                                                                                   (nat %total_supply)))))))))
                                                                      (pair (big_map %ledger (pair address nat) nat)
                                                                            (pair (big_map %allowances (pair address nat) (set address))
                                                                                  (pair (big_map %dev_rewards
                                                                                           (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                                                                                           nat)
                                                                                        (pair (big_map %referral_rewards
                                                                                                 (pair address
                                                                                                       (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id))))
                                                                                                 nat)
                                                                                              (pair (big_map %stakers_balance
                                                                                                       (pair address nat)
                                                                                                       (pair (nat %balance) (map %earnings nat (pair (nat %reward_f) (nat %former_f)))))
                                                                                                    (pair (pair %quipu_token (address %token_address) (nat %token_id))
                                                                                                          (pair (address %factory_address) (bool %started))))))))))))))))
                      (pair (list operation)
                            (pair (address %admin)
                                  (pair (address %default_referral)
                                        (pair (set %managers address)
                                              (pair (nat %pools_count)
                                                    (pair (big_map %tokens
                                                             nat
                                                             (map nat (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))))
                                                          (pair (big_map %pool_to_id bytes nat)
                                                                (pair (big_map %pools
                                                                         nat
                                                                         (pair (nat %initial_A_f)
                                                                               (pair (timestamp %initial_A_time)
                                                                                     (pair (nat %future_A_f)
                                                                                           (pair (timestamp %future_A_time)
                                                                                                 (pair (map %tokens_info
                                                                                                          nat
                                                                                                          (pair (nat %rate_f) (pair (nat %precision_multiplier_f) (nat %reserves))))
                                                                                                       (pair (pair %fee (nat %lp_f) (pair (nat %stakers_f) (nat %ref_f)))
                                                                                                             (pair (pair %staker_accumulator (map %accumulator_f nat nat) (nat %total_staked))
                                                                                                                   (nat %total_supply)))))))))
                                                                      (pair (big_map %ledger (pair address nat) nat)
                                                                            (pair (big_map %allowances (pair address nat) (set address))
                                                                                  (pair (big_map %dev_rewards
                                                                                           (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                                                                                           nat)
                                                                                        (pair (big_map %referral_rewards
                                                                                                 (pair address
                                                                                                       (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id))))
                                                                                                 nat)
                                                                                              (pair (big_map %stakers_balance
                                                                                                       (pair address nat)
                                                                                                       (pair (nat %balance) (map %earnings nat (pair (nat %reward_f) (nat %former_f)))))
                                                                                                    (pair (pair %quipu_token (address %token_address) (nat %token_id))
                                                                                                          (pair (address %factory_address) (bool %started))))))))))))))))) ;
                 IF_NONE { FAILWITH } { SWAP ; DROP } ;
                 DUP 3 ;
                 CAR ;
                 DIG 2 ;
                 PAIR ;
                 EXEC ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 UPDATE 1 ;
                 SWAP ;
                 CAR ;
                 PAIR }
               { DUG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 GET 28 ;
                 IF { DROP } { FAILWITH } ;
                 DIG 3 ;
                 DUP 3 ;
                 GET 10 ;
                 DUP 3 ;
                 IF_LEFT
                   { IF_LEFT
                       { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 4 } }
                       { IF_LEFT { DROP ; PUSH nat 0 } { DROP ; PUSH nat 3 } } }
                   { DROP ; PUSH nat 2 } ;
                 GET ;
                 IF_NONE { FAILWITH } { SWAP ; DROP } ;
                 DIG 3 ;
                 SWAP ;
                 UNPACK
                   (lambda
                      (pair (or (or (or (pair %balance_of
                                           (list %requests (pair (address %owner) (nat %token_id)))
                                           (contract %callback
                                              (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                                        (pair %total_supply (nat %token_id) (contract %receiver nat)))
                                    (or (list %transfer
                                           (pair (address %from_)
                                                 (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))
                                        (pair %update_metadata (nat %token_id) (map %token_info string bytes))))
                                (list %update_operators
                                   (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id)))
                                       (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))))
                            (pair (pair %storage
                                     (address %admin)
                                     (pair (address %default_referral)
                                           (pair (set %managers address)
                                                 (pair (nat %pools_count)
                                                       (pair (big_map %tokens
                                                                nat
                                                                (map nat (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))))
                                                             (pair (big_map %pool_to_id bytes nat)
                                                                   (pair (big_map %pools
                                                                            nat
                                                                            (pair (nat %initial_A_f)
                                                                                  (pair (timestamp %initial_A_time)
                                                                                        (pair (nat %future_A_f)
                                                                                              (pair (timestamp %future_A_time)
                                                                                                    (pair (map %tokens_info
                                                                                                             nat
                                                                                                             (pair (nat %rate_f) (pair (nat %precision_multiplier_f) (nat %reserves))))
                                                                                                          (pair (pair %fee (nat %lp_f) (pair (nat %stakers_f) (nat %ref_f)))
                                                                                                                (pair (pair %staker_accumulator (map %accumulator_f nat nat) (nat %total_staked))
                                                                                                                      (nat %total_supply)))))))))
                                                                         (pair (big_map %ledger (pair address nat) nat)
                                                                               (pair (big_map %allowances (pair address nat) (set address))
                                                                                     (pair (big_map %dev_rewards
                                                                                              (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                                                                                              nat)
                                                                                           (pair (big_map %referral_rewards
                                                                                                    (pair address
                                                                                                          (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id))))
                                                                                                    nat)
                                                                                                 (pair (big_map %stakers_balance
                                                                                                          (pair address nat)
                                                                                                          (pair (nat %balance) (map %earnings nat (pair (nat %reward_f) (nat %former_f)))))
                                                                                                       (pair (pair %quipu_token (address %token_address) (nat %token_id))
                                                                                                             (pair (address %factory_address) (bool %started)))))))))))))))
                                  (pair (big_map %metadata string bytes)
                                        (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
                                              (pair (big_map %admin_lambdas nat bytes)
                                                    (pair (big_map %dex_lambdas nat bytes) (big_map %token_lambdas nat bytes)))))))
                      (pair (list operation)
                            (pair (pair %storage
                                     (address %admin)
                                     (pair (address %default_referral)
                                           (pair (set %managers address)
                                                 (pair (nat %pools_count)
                                                       (pair (big_map %tokens
                                                                nat
                                                                (map nat (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))))
                                                             (pair (big_map %pool_to_id bytes nat)
                                                                   (pair (big_map %pools
                                                                            nat
                                                                            (pair (nat %initial_A_f)
                                                                                  (pair (timestamp %initial_A_time)
                                                                                        (pair (nat %future_A_f)
                                                                                              (pair (timestamp %future_A_time)
                                                                                                    (pair (map %tokens_info
                                                                                                             nat
                                                                                                             (pair (nat %rate_f) (pair (nat %precision_multiplier_f) (nat %reserves))))
                                                                                                          (pair (pair %fee (nat %lp_f) (pair (nat %stakers_f) (nat %ref_f)))
                                                                                                                (pair (pair %staker_accumulator (map %accumulator_f nat nat) (nat %total_staked))
                                                                                                                      (nat %total_supply)))))))))
                                                                         (pair (big_map %ledger (pair address nat) nat)
                                                                               (pair (big_map %allowances (pair address nat) (set address))
                                                                                     (pair (big_map %dev_rewards
                                                                                              (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))
                                                                                              nat)
                                                                                           (pair (big_map %referral_rewards
                                                                                                    (pair address
                                                                                                          (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id))))
                                                                                                    nat)
                                                                                                 (pair (big_map %stakers_balance
                                                                                                          (pair address nat)
                                                                                                          (pair (nat %balance) (map %earnings nat (pair (nat %reward_f) (nat %former_f)))))
                                                                                                       (pair (pair %quipu_token (address %token_address) (nat %token_id))
                                                                                                             (pair (address %factory_address) (bool %started)))))))))))))))
                                  (pair (big_map %metadata string bytes)
                                        (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
                                              (pair (big_map %admin_lambdas nat bytes)
                                                    (pair (big_map %dex_lambdas nat bytes) (big_map %token_lambdas nat bytes)))))))) ;
                 IF_NONE { FAILWITH } { SWAP ; DROP } ;
                 DUG 2 ;
                 PAIR ;
                 EXEC } } } ;
  view "get_referral_rewards"
       (list (pair (address %user)
                   (or %token (address %fa12) (pair %fa2 (address %token_address) (nat %token_id)))))
       (list (pair (pair %request
                      (address %user)
                      (or %token (address %fa12) (pair %fa2 (address %token_address) (nat %token_id))))
                   (nat %reward)))
       { UNPAIR ;
         NIL (pair (pair address (or address (pair address nat))) nat) ;
         SWAP ;
         NIL (pair address (or address (pair address nat))) ;
         SWAP ;
         ITER { CONS } ;
         ITER { SWAP ;
                PUSH nat 0 ;
                DUP 4 ;
                CAR ;
                GET 21 ;
                DUP 4 ;
                CDR ;
                DUP 5 ;
                CAR ;
                PAIR ;
                GET ;
                IF_NONE {} { SWAP ; DROP } ;
                DIG 2 ;
                PAIR ;
                CONS } ;
         SWAP ;
         DROP } ;
  view "get_staker_info"
       (list (pair (address %user) (nat %pool_id)))
       (list (pair (pair %request (address %user) (nat %pool_id))
                   (pair %info (nat %balance) (map %rewards nat nat))))
       { PUSH string "not-launched" ;
         SWAP ;
         UNPAIR ;
         NIL (pair (pair address nat) (pair nat (map nat nat))) ;
         SWAP ;
         NIL (pair address nat) ;
         SWAP ;
         ITER { CONS } ;
         ITER { DUP 4 ;
                DUP 4 ;
                CAR ;
                GET 13 ;
                DUP 3 ;
                CDR ;
                GET ;
                IF_NONE { FAILWITH } { SWAP ; DROP } ;
                DUP 5 ;
                DUP 5 ;
                CAR ;
                GET 23 ;
                DUP 4 ;
                CDR ;
                DUP 5 ;
                CAR ;
                PAIR ;
                GET ;
                IF_NONE { FAILWITH } { SWAP ; DROP } ;
                DUP ;
                CDR ;
                MAP { UNPAIR ;
                      PUSH nat 0 ;
                      DUP 5 ;
                      GET 13 ;
                      CAR ;
                      DIG 2 ;
                      GET ;
                      IF_NONE {} { SWAP ; DROP } ;
                      DUP 3 ;
                      CAR ;
                      MUL ;
                      PUSH nat 10000000000 ;
                      DUP 3 ;
                      CDR ;
                      DIG 2 ;
                      SUB ;
                      ABS ;
                      DIG 2 ;
                      CAR ;
                      ADD ;
                      EDIV ;
                      IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                      CAR } ;
                DIG 2 ;
                DROP ;
                SWAP ;
                CAR ;
                PAIR ;
                DIG 2 ;
                SWAP ;
                DIG 2 ;
                PAIR ;
                CONS } ;
         SWAP ;
         DIG 2 ;
         DROP 2 } ;
  view "get_fees"
       nat
       (pair (nat %lp_f) (pair (nat %stakers_f) (nat %ref_f)))
       { UNPAIR ;
         PUSH string "not-launched" ;
         DIG 2 ;
         CAR ;
         GET 13 ;
         DIG 2 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         GET 11 } ;
  view "view_A"
       nat
       nat
       { PUSH string "timestamp-error" ;
         SWAP ;
         UNPAIR ;
         PUSH string "not-launched" ;
         DIG 2 ;
         CAR ;
         GET 13 ;
         DIG 2 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         PUSH nat 100 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         GET 5 ;
         DUP 3 ;
         GET 7 ;
         PAIR ;
         DUP 3 ;
         CAR ;
         DIG 3 ;
         GET 3 ;
         DIG 2 ;
         UNPAIR ;
         DUP ;
         NOW ;
         COMPARE ;
         LT ;
         IF { DUP 6 ;
              DUP 4 ;
              NOW ;
              SUB ;
              ISNAT ;
              IF_NONE { FAILWITH } { SWAP ; DROP } ;
              DIG 6 ;
              DIG 4 ;
              DIG 3 ;
              SUB ;
              ISNAT ;
              IF_NONE { FAILWITH } { SWAP ; DROP } ;
              DUP 4 ;
              DUP 4 ;
              SUB ;
              ABS ;
              SWAP ;
              DUG 2 ;
              MUL ;
              EDIV ;
              IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
              CAR ;
              DUP 3 ;
              DIG 2 ;
              COMPARE ;
              GT ;
              IF { ADD } { SWAP ; SUB ; ABS } }
            { DIG 2 ; DIG 3 ; DIG 5 ; DROP 4 } ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR } ;
  view "get_dy"
       (pair (nat %pool_id) (pair (nat %i) (pair (nat %j) (nat %dx))))
       nat
       { PUSH nat 1000000000000000000 ;
         PUSH nat 100 ;
         PUSH string "wrong-index" ;
         PUSH string "timestamp-error" ;
         PUSH string "value-not-natural" ;
         DIG 5 ;
         UNPAIR ;
         PUSH string "not-launched" ;
         DUP 3 ;
         CAR ;
         GET 13 ;
         DUP 3 ;
         CAR ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DUP ;
         DUP 3 ;
         GET 6 ;
         PAIR ;
         DUP 3 ;
         GET 5 ;
         DIG 3 ;
         GET 3 ;
         DIG 2 ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DUG 2 ;
         GET 9 ;
         MAP { CDR ;
               DUP 12 ;
               SWAP ;
               DUP ;
               DUG 2 ;
               GET 4 ;
               DIG 2 ;
               CAR ;
               MUL ;
               EDIV ;
               IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
               CAR } ;
         DUP 10 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP 6 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DUP 11 ;
         DUP 3 ;
         DUP 8 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DUP 12 ;
         DUP 6 ;
         GET 9 ;
         DUP 8 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DIG 12 ;
         DUP 7 ;
         GET 9 ;
         DUP 10 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DUP 15 ;
         DIG 2 ;
         CAR ;
         DIG 6 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR ;
         DIG 3 ;
         ADD ;
         DIG 4 ;
         DIG 4 ;
         DIG 2 ;
         PAIR ;
         DIG 5 ;
         DIG 5 ;
         DIG 2 ;
         UNPAIR ;
         DUP 5 ;
         GET 9 ;
         SIZE ;
         DUP 5 ;
         DUP 5 ;
         COMPARE ;
         NEQ ;
         IF {} { PUSH string "failed assertion" ; FAILWITH } ;
         DUP ;
         DUP 6 ;
         COMPARE ;
         LT ;
         IF {} { PUSH string "failed assertion" ; FAILWITH } ;
         DUP ;
         DUP 5 ;
         COMPARE ;
         LT ;
         IF {} { PUSH string "failed assertion" ; FAILWITH } ;
         DUP 6 ;
         GET 5 ;
         DUP 7 ;
         GET 7 ;
         PAIR ;
         DUP 7 ;
         CAR ;
         DUP 8 ;
         GET 3 ;
         DIG 2 ;
         UNPAIR ;
         DUP ;
         NOW ;
         COMPARE ;
         LT ;
         IF { DUP 16 ;
              DUP 4 ;
              NOW ;
              SUB ;
              ISNAT ;
              IF_NONE { FAILWITH } { SWAP ; DROP } ;
              DIG 16 ;
              DIG 4 ;
              DIG 3 ;
              SUB ;
              ISNAT ;
              IF_NONE { FAILWITH } { SWAP ; DROP } ;
              DUP 4 ;
              DUP 4 ;
              SUB ;
              ABS ;
              SWAP ;
              DUG 2 ;
              MUL ;
              EDIV ;
              IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
              CAR ;
              DUP 3 ;
              DIG 2 ;
              COMPARE ;
              GT ;
              IF { ADD } { SWAP ; SUB ; ABS } }
            { DIG 2 ; DIG 3 ; DIG 15 ; DROP 4 } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         MUL ;
         SWAP ;
         DUP 5 ;
         PUSH nat 0 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         ITER { CDR ; ADD } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         SIZE ;
         DUP ;
         DIG 4 ;
         MUL ;
         PUSH nat 0 ;
         DUP 4 ;
         PAIR ;
         DUP 18 ;
         DIG 5 ;
         DIG 5 ;
         DIG 5 ;
         DIG 5 ;
         PAIR 5 ;
         LAMBDA
           (pair (pair nat (pair nat (pair nat (pair (map nat nat) nat)))) (pair nat nat))
           (pair bool (pair nat nat))
           { UNPAIR ;
             UNPAIR 5 ;
             DIG 5 ;
             PUSH nat 1 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             DUP 3 ;
             CAR ;
             SUB ;
             ABS ;
             COMPARE ;
             GT ;
             IF { DUP ;
                  CAR ;
                  DIG 5 ;
                  ITER { SWAP ;
                         DUP 5 ;
                         DIG 2 ;
                         CDR ;
                         MUL ;
                         DUP 3 ;
                         CAR ;
                         DIG 2 ;
                         MUL ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR } ;
                  SWAP ;
                  DUP ;
                  CAR ;
                  UPDATE 2 ;
                  DUP ;
                  DUP 3 ;
                  PUSH nat 1 ;
                  DUP 7 ;
                  ADD ;
                  MUL ;
                  DUP 8 ;
                  DUP 4 ;
                  CAR ;
                  PUSH string "wrong-precision" ;
                  DUP 11 ;
                  DUP 9 ;
                  SUB ;
                  ISNAT ;
                  IF_NONE { FAILWITH } { SWAP ; DROP } ;
                  MUL ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  ADD ;
                  DIG 2 ;
                  CAR ;
                  DIG 5 ;
                  DIG 4 ;
                  MUL ;
                  DIG 6 ;
                  DIG 6 ;
                  DIG 6 ;
                  MUL ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  ADD ;
                  MUL ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  UPDATE 1 ;
                  PUSH bool True ;
                  PAIR }
                { SWAP ; DIG 2 ; DIG 3 ; DIG 4 ; DIG 5 ; DROP 5 ; PUSH bool False ; PAIR } } ;
         SWAP ;
         APPLY ;
         SWAP ;
         PUSH bool True ;
         LOOP { DIP { DUP } ; EXEC ; UNPAIR } ;
         SWAP ;
         DROP ;
         CAR ;
         PUSH nat 0 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         PAIR ;
         DIG 5 ;
         ITER { DUP ;
                DUG 2 ;
                CAR ;
                DUP 9 ;
                SWAP ;
                DUP ;
                DUG 2 ;
                COMPARE ;
                NEQ ;
                IF { DUP 8 ;
                     SWAP ;
                     COMPARE ;
                     EQ ;
                     IF { SWAP ; DROP ; DUP 5 } { SWAP ; CDR } ;
                     DUP ;
                     DUP 3 ;
                     CDR ;
                     ADD ;
                     DIG 2 ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     DUP 6 ;
                     DUP 4 ;
                     MUL ;
                     DUP 5 ;
                     DIG 3 ;
                     CAR ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     PAIR }
                   { DIG 2 ; DROP 2 ; PUSH nat 0 ; PAIR } ;
                CDR } ;
         DIG 3 ;
         DIG 4 ;
         DIG 5 ;
         DIG 6 ;
         DROP 4 ;
         DIG 3 ;
         DUG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         PAIR ;
         DIG 3 ;
         DIG 3 ;
         CAR ;
         DIG 2 ;
         UNPAIR ;
         DIG 4 ;
         GET 9 ;
         SIZE ;
         DUP 5 ;
         MUL ;
         DUP 11 ;
         DUP 4 ;
         DIG 5 ;
         MUL ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR ;
         DIG 3 ;
         DIG 9 ;
         DUP 5 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR ;
         DIG 2 ;
         ADD ;
         DUP 3 ;
         PUSH nat 0 ;
         PAIR ;
         DUP 9 ;
         DIG 4 ;
         DIG 4 ;
         DIG 4 ;
         PAIR 4 ;
         LAMBDA
           (pair (pair nat (pair nat (pair nat string))) (pair nat nat))
           (pair bool (pair nat nat))
           { UNPAIR ;
             UNPAIR 4 ;
             DIG 4 ;
             PUSH nat 1 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             DUP 3 ;
             CDR ;
             SUB ;
             ABS ;
             COMPARE ;
             GT ;
             IF { DUP ;
                  CDR ;
                  SWAP ;
                  CDR ;
                  PAIR ;
                  DIG 4 ;
                  DIG 4 ;
                  DIG 3 ;
                  DUP 4 ;
                  CDR ;
                  PUSH int 2 ;
                  MUL ;
                  ADD ;
                  SUB ;
                  ISNAT ;
                  IF_NONE { FAILWITH } { SWAP ; DROP } ;
                  DUG 2 ;
                  DUP ;
                  DUG 3 ;
                  CDR ;
                  DUP 4 ;
                  CDR ;
                  MUL ;
                  ADD ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  SWAP ;
                  CAR ;
                  PAIR ;
                  PUSH bool True ;
                  PAIR }
                { SWAP ; DIG 2 ; DIG 3 ; DIG 4 ; DROP 4 ; PUSH bool False ; PAIR } } ;
         SWAP ;
         APPLY ;
         SWAP ;
         PUSH bool True ;
         LOOP { DIP { DUP } ; EXEC ; UNPAIR } ;
         SWAP ;
         DROP ;
         CDR ;
         DIG 5 ;
         PUSH int 1 ;
         DIG 2 ;
         DIG 4 ;
         SUB ;
         SUB ;
         ISNAT ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         SWAP ;
         CAR ;
         DIG 4 ;
         DIG 2 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR ;
         PUSH nat 10000000000 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         PUSH string "no-fee-view" ;
         DIG 5 ;
         CAR ;
         GET 27 ;
         UNIT ;
         VIEW "dev_fee" nat ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DIG 4 ;
         GET 11 ;
         DUP ;
         DUG 2 ;
         GET 4 ;
         DUP 3 ;
         GET 3 ;
         DIG 3 ;
         CAR ;
         ADD ;
         ADD ;
         ADD ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR ;
         PUSH string "fee-overflow" ;
         SWAP ;
         DIG 2 ;
         SUB ;
         ISNAT ;
         IF_NONE { FAILWITH } { SWAP ; DROP } } ;
  view "calc_divest_one_coin"
       (pair (nat %pool_id) (pair (nat %token_amount) (nat %i)))
       nat
       { PUSH nat 100 ;
         PUSH string "wrong-index" ;
         PUSH string "timestamp-error" ;
         PUSH string "value-not-natural" ;
         DUP 4 ;
         DUP 4 ;
         DUP 3 ;
         PAIR 3 ;
         LAMBDA
           (pair (pair string (pair string nat))
                 (pair (pair (pair nat nat) (pair (map nat nat) nat))
                       (pair nat
                             (pair timestamp
                                   (pair nat
                                         (pair timestamp
                                               (pair (map nat (pair nat (pair nat nat)))
                                                     (pair (pair nat (pair nat nat)) (pair (pair (map nat nat) nat) nat)))))))))
           nat
           { UNPAIR ;
             UNPAIR 3 ;
             DIG 3 ;
             UNPAIR ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DUP 5 ;
             GET 9 ;
             SIZE ;
             DIG 7 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             DUP 7 ;
             COMPARE ;
             LT ;
             IF { DROP } { FAILWITH } ;
             DUP ;
             DIG 4 ;
             MUL ;
             PUSH nat 0 ;
             DUP 5 ;
             PAIR ;
             DIG 3 ;
             ITER { SWAP ;
                    DUP 6 ;
                    DUP 3 ;
                    CAR ;
                    COMPARE ;
                    NEQ ;
                    IF { SWAP ;
                         CDR ;
                         DUP ;
                         DUP 3 ;
                         CDR ;
                         ADD ;
                         DIG 2 ;
                         CAR ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         DUP 5 ;
                         DUP 4 ;
                         MUL ;
                         DUP 7 ;
                         DIG 3 ;
                         CAR ;
                         MUL ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR ;
                         PAIR ;
                         SWAP ;
                         PAIR }
                       { SWAP ; DROP ; PUSH nat 0 ; PAIR } ;
                    CDR } ;
             DIG 2 ;
             DIG 4 ;
             DROP 2 ;
             DIG 3 ;
             DIG 3 ;
             DUP 3 ;
             CDR ;
             PAIR ;
             DIG 3 ;
             DIG 3 ;
             CAR ;
             DIG 2 ;
             UNPAIR ;
             DIG 4 ;
             GET 9 ;
             SIZE ;
             DUP 5 ;
             MUL ;
             DUP 7 ;
             DUP 4 ;
             DIG 5 ;
             MUL ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIG 3 ;
             DIG 5 ;
             DUP 5 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIG 2 ;
             ADD ;
             DUP 3 ;
             PUSH nat 0 ;
             PAIR ;
             DUG 4 ;
             PAIR 4 ;
             LAMBDA
               (pair (pair nat (pair nat (pair nat string))) (pair nat nat))
               (pair bool (pair nat nat))
               { UNPAIR ;
                 UNPAIR 4 ;
                 DIG 4 ;
                 PUSH nat 1 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 DUP 3 ;
                 CDR ;
                 SUB ;
                 ABS ;
                 COMPARE ;
                 GT ;
                 IF { DUP ;
                      CDR ;
                      SWAP ;
                      CDR ;
                      PAIR ;
                      DIG 4 ;
                      DIG 4 ;
                      DIG 3 ;
                      DUP 4 ;
                      CDR ;
                      PUSH int 2 ;
                      MUL ;
                      ADD ;
                      SUB ;
                      ISNAT ;
                      IF_NONE { FAILWITH } { SWAP ; DROP } ;
                      DUG 2 ;
                      DUP ;
                      DUG 3 ;
                      CDR ;
                      DUP 4 ;
                      CDR ;
                      MUL ;
                      ADD ;
                      EDIV ;
                      IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                      CAR ;
                      SWAP ;
                      CAR ;
                      PAIR ;
                      PUSH bool True ;
                      PAIR }
                    { SWAP ; DIG 2 ; DIG 3 ; DIG 4 ; DROP 4 ; PUSH bool False ; PAIR } } ;
             SWAP ;
             APPLY ;
             SWAP ;
             PUSH bool True ;
             LOOP { DIP { DUP } ; EXEC ; UNPAIR } ;
             SWAP ;
             DROP ;
             CDR } ;
         SWAP ;
         APPLY ;
         DIG 5 ;
         UNPAIR ;
         PUSH string "not-launched" ;
         DUP 3 ;
         CAR ;
         GET 13 ;
         DUP 3 ;
         CAR ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DUP ;
         GET 5 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         GET 7 ;
         PAIR ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CAR ;
         DUP 3 ;
         GET 3 ;
         DIG 2 ;
         UNPAIR ;
         DUP ;
         NOW ;
         COMPARE ;
         LT ;
         IF { DUP 10 ;
              DUP 4 ;
              NOW ;
              SUB ;
              ISNAT ;
              IF_NONE { FAILWITH } { SWAP ; DROP } ;
              DIG 10 ;
              DIG 4 ;
              DIG 3 ;
              SUB ;
              ISNAT ;
              IF_NONE { FAILWITH } { SWAP ; DROP } ;
              DUP 4 ;
              DUP 4 ;
              SUB ;
              ABS ;
              SWAP ;
              DUG 2 ;
              MUL ;
              EDIV ;
              IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
              CAR ;
              DUP 3 ;
              DIG 2 ;
              COMPARE ;
              GT ;
              IF { ADD } { SWAP ; SUB ; ABS } }
            { DIG 2 ; DIG 3 ; DIG 9 ; DROP 4 } ;
         SWAP ;
         PUSH string "no-fee-view" ;
         DIG 4 ;
         CAR ;
         GET 27 ;
         UNIT ;
         VIEW "dev_fee" nat ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DUP 4 ;
         GET 4 ;
         PAIR ;
         DIG 3 ;
         GET 3 ;
         DIG 3 ;
         DIG 2 ;
         UNPAIR ;
         DUP 5 ;
         GET 9 ;
         MAP { CDR ;
               PUSH nat 1000000000000000000 ;
               SWAP ;
               DUP ;
               DUG 2 ;
               GET 4 ;
               DIG 2 ;
               CAR ;
               MUL ;
               EDIV ;
               IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
               CAR } ;
         DUP 4 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         PUSH nat 0 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         ITER { CDR ; ADD } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         SIZE ;
         DUP ;
         DIG 4 ;
         MUL ;
         PUSH nat 0 ;
         DUP 4 ;
         PAIR ;
         DIG 14 ;
         DIG 5 ;
         DIG 5 ;
         DIG 5 ;
         DIG 5 ;
         PAIR 5 ;
         LAMBDA
           (pair (pair nat (pair nat (pair nat (pair (map nat nat) nat)))) (pair nat nat))
           (pair bool (pair nat nat))
           { UNPAIR ;
             UNPAIR 5 ;
             DIG 5 ;
             PUSH nat 1 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             DUP 3 ;
             CAR ;
             SUB ;
             ABS ;
             COMPARE ;
             GT ;
             IF { DUP ;
                  CAR ;
                  DIG 5 ;
                  ITER { SWAP ;
                         DUP 5 ;
                         DIG 2 ;
                         CDR ;
                         MUL ;
                         DUP 3 ;
                         CAR ;
                         DIG 2 ;
                         MUL ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR } ;
                  SWAP ;
                  DUP ;
                  CAR ;
                  UPDATE 2 ;
                  DUP ;
                  DUP 3 ;
                  PUSH nat 1 ;
                  DUP 7 ;
                  ADD ;
                  MUL ;
                  DUP 8 ;
                  DUP 4 ;
                  CAR ;
                  PUSH string "wrong-precision" ;
                  DUP 11 ;
                  DUP 9 ;
                  SUB ;
                  ISNAT ;
                  IF_NONE { FAILWITH } { SWAP ; DROP } ;
                  MUL ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  ADD ;
                  DIG 2 ;
                  CAR ;
                  DIG 5 ;
                  DIG 4 ;
                  MUL ;
                  DIG 6 ;
                  DIG 6 ;
                  DIG 6 ;
                  MUL ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  ADD ;
                  MUL ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  UPDATE 1 ;
                  PUSH bool True ;
                  PAIR }
                { SWAP ; DIG 2 ; DIG 3 ; DIG 4 ; DIG 5 ; DROP 5 ; PUSH bool False ; PAIR } } ;
         SWAP ;
         APPLY ;
         SWAP ;
         PUSH bool True ;
         LOOP { DIP { DUP } ; EXEC ; UNPAIR } ;
         SWAP ;
         DROP ;
         CAR ;
         DUP 9 ;
         DUP 8 ;
         GET 14 ;
         DUP 3 ;
         DUP 9 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR ;
         DUP 3 ;
         SUB ;
         ISNAT ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DUP 8 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP 5 ;
         PAIR ;
         DUP 6 ;
         DUP 9 ;
         PAIR ;
         PAIR ;
         PAIR ;
         DUP 10 ;
         SWAP ;
         EXEC ;
         DIG 5 ;
         DUP 9 ;
         GET 11 ;
         DUP ;
         DUG 2 ;
         GET 4 ;
         DUP 3 ;
         GET 3 ;
         DIG 3 ;
         CAR ;
         ADD ;
         ADD ;
         ADD ;
         DUP 5 ;
         MAP { UNPAIR ;
               DUP 8 ;
               SWAP ;
               COMPARE ;
               EQ ;
               IF { DUP 12 ;
                    DUP 4 ;
                    DUP 7 ;
                    DUP 7 ;
                    DUP 5 ;
                    MUL ;
                    EDIV ;
                    IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                    CAR ;
                    SUB ;
                    ISNAT ;
                    IF_NONE { FAILWITH } { SWAP ; DROP } }
                  { DUP 12 ;
                    DUP 6 ;
                    DUP 6 ;
                    DUP 4 ;
                    MUL ;
                    EDIV ;
                    IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                    CAR ;
                    DUP 3 ;
                    SUB ;
                    ISNAT ;
                    IF_NONE { FAILWITH } { SWAP ; DROP } } ;
               DUP 13 ;
               PUSH nat 10000000000 ;
               DUP 13 ;
               GET 9 ;
               SIZE ;
               DUP 6 ;
               PUSH string "wrong-tokens-count" ;
               PUSH nat 1 ;
               DUP 4 ;
               SUB ;
               ISNAT ;
               IF_NONE { FAILWITH } { SWAP ; DROP } ;
               PUSH nat 4 ;
               MUL ;
               DUG 2 ;
               MUL ;
               EDIV ;
               IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
               CAR ;
               DIG 3 ;
               MUL ;
               EDIV ;
               IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
               CAR ;
               DIG 2 ;
               SUB ;
               ISNAT ;
               IF_NONE { FAILWITH } { SWAP ; DROP } } ;
         SWAP ;
         DIG 4 ;
         DROP 2 ;
         DUP 11 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP 7 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DUP 11 ;
         DUP 10 ;
         DIG 5 ;
         DIG 4 ;
         PAIR ;
         DUP 7 ;
         DIG 8 ;
         PAIR ;
         PAIR ;
         PAIR ;
         DIG 8 ;
         SWAP ;
         EXEC ;
         DIG 2 ;
         SUB ;
         ISNAT ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DUP 8 ;
         DUP 7 ;
         GET 9 ;
         DUP 6 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         GET 3 ;
         DIG 8 ;
         DIG 4 ;
         DIG 5 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP 8 ;
         PUSH int 1 ;
         DIG 5 ;
         SUB ;
         ISNAT ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR ;
         DIG 2 ;
         DUP 7 ;
         DIG 4 ;
         DIG 4 ;
         SUB ;
         ISNAT ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR ;
         PUSH string "low-total-supply" ;
         DIG 3 ;
         DIG 4 ;
         GET 14 ;
         SUB ;
         ISNAT ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DIG 3 ;
         DUP 4 ;
         DIG 3 ;
         SUB ;
         ISNAT ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DIG 2 ;
         PAIR 3 ;
         CAR } ;
  view "get_tok_per_share"
       nat
       (map nat nat)
       { UNPAIR ;
         PUSH string "not-launched" ;
         DIG 2 ;
         CAR ;
         GET 13 ;
         DIG 2 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         DUP ;
         GET 9 ;
         MAP { CDR ;
               SWAP ;
               DUP ;
               DUG 2 ;
               GET 14 ;
               PUSH nat 1000000000000000000 ;
               DIG 2 ;
               GET 4 ;
               MUL ;
               EDIV ;
               IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
               CAR } ;
         SWAP ;
         DROP } ;
  view "get_token_map"
       nat
       (map nat (or (address %fa12) (pair %fa2 (address %token_address) (nat %token_id))))
       { UNPAIR ;
         PUSH string "not-launched" ;
         DIG 2 ;
         CAR ;
         GET 9 ;
         DIG 2 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } } ;
  view "get_reserves"
       nat
       (map nat nat)
       { UNPAIR ;
         PUSH string "not-launched" ;
         DIG 2 ;
         CAR ;
         GET 13 ;
         DIG 2 ;
         GET ;
         IF_NONE { FAILWITH } { SWAP ; DROP } ;
         GET 9 ;
         MAP { CDR ; GET 4 } } }

